fileFormatVersion: 2
guid: 9e9019f98e956c94c9e7728e42078b2c
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nexports.TimeSpan = void 0;\r\nconst MILLIS_PER_SECOND =
    1000;\r\nconst MILLIS_PER_MINUTE = MILLIS_PER_SECOND * 60; //     60,000\r\nconst
    MILLIS_PER_HOUR = MILLIS_PER_MINUTE * 60; //  3,600,000\r\nconst MILLIS_PER_DAY
    = MILLIS_PER_HOUR * 24; // 86,400,000\r\nclass TimeSpan {\r\n    constructor(millis)
    {\r\n        this._millis = millis;\r\n    }\r\n    static interval(value, scale)
    {\r\n        if (Number.isNaN(value)) {\r\n            throw new Error(\"value
    can''t be NaN\");\r\n        }\r\n        const tmp = value * scale;\r\n       
    const millis = TimeSpan.round(tmp + (value >= 0 ? 0.5 : -0.5));\r\n        if
    ((millis > TimeSpan.maxValue.totalMilliseconds) || (millis < TimeSpan.minValue.totalMilliseconds))
    {\r\n            //throw new TimeSpanOverflowError(\"TimeSpanTooLong\");\r\n           
    throw new Error(\"TimeSpanTooLong\");\r\n        }\r\n        return new TimeSpan(millis);\r\n   
    }\r\n    static round(n) {\r\n        if (n < 0) {\r\n            return Math.ceil(n);\r\n       
    }\r\n        else if (n > 0) {\r\n            return Math.floor(n);\r\n       
    }\r\n        return 0;\r\n    }\r\n    static timeToMilliseconds(hour, minute,
    second) {\r\n        const totalSeconds = (hour * 3600) + (minute * 60) + second;\r\n       
    if (totalSeconds > TimeSpan.maxValue.totalSeconds || totalSeconds < TimeSpan.minValue.totalSeconds)
    {\r\n            //throw new TimeSpanOverflowError(\"TimeSpanTooLong\");\r\n           
    throw new Error(\"TimeSpanTooLong\");\r\n        }\r\n        return totalSeconds
    * MILLIS_PER_SECOND;\r\n    }\r\n    static get zero() {\r\n        return new
    TimeSpan(0);\r\n    }\r\n    static get maxValue() {\r\n        return new TimeSpan(Number.MAX_SAFE_INTEGER);\r\n   
    }\r\n    static get minValue() {\r\n        return new TimeSpan(Number.MIN_SAFE_INTEGER);\r\n   
    }\r\n    static fromDays(value) {\r\n        return TimeSpan.interval(value,
    MILLIS_PER_DAY);\r\n    }\r\n    static fromHours(value) {\r\n        return
    TimeSpan.interval(value, MILLIS_PER_HOUR);\r\n    }\r\n    static fromMilliseconds(value)
    {\r\n        return TimeSpan.interval(value, 1);\r\n    }\r\n    static fromMinutes(value)
    {\r\n        return TimeSpan.interval(value, MILLIS_PER_MINUTE);\r\n    }\r\n   
    static fromSeconds(value) {\r\n        return TimeSpan.interval(value, MILLIS_PER_SECOND);\r\n   
    }\r\n    static fromTime(daysOrHours, hoursOrMinutes, minutesOrSeconds, seconds,
    milliseconds) {\r\n        if (milliseconds != undefined) {\r\n            return
    this.fromTimeStartingFromDays(daysOrHours, hoursOrMinutes, minutesOrSeconds,
    seconds, milliseconds);\r\n        }\r\n        else {\r\n            return
    this.fromTimeStartingFromHours(daysOrHours, hoursOrMinutes, minutesOrSeconds);\r\n       
    }\r\n    }\r\n    static fromTimeStartingFromHours(hours, minutes, seconds) {\r\n       
    const millis = TimeSpan.timeToMilliseconds(hours, minutes, seconds);\r\n       
    return new TimeSpan(millis);\r\n    }\r\n    static fromTimeStartingFromDays(days,
    hours, minutes, seconds, milliseconds) {\r\n        const totalMilliSeconds =
    (days * MILLIS_PER_DAY) +\r\n            (hours * MILLIS_PER_HOUR) +\r\n           
    (minutes * MILLIS_PER_MINUTE) +\r\n            (seconds * MILLIS_PER_SECOND)
    +\r\n            milliseconds;\r\n        if (totalMilliSeconds > TimeSpan.maxValue.totalMilliseconds
    || totalMilliSeconds < TimeSpan.minValue.totalMilliseconds) {\r\n           
    //throw new TimeSpanOverflowError(\"TimeSpanTooLong\");\r\n            throw
    new Error(\"TimeSpanTooLong\");\r\n        }\r\n        return new TimeSpan(totalMilliSeconds);\r\n   
    }\r\n    get days() {\r\n        return TimeSpan.round(this._millis / MILLIS_PER_DAY);\r\n   
    }\r\n    get hours() {\r\n        return TimeSpan.round((this._millis / MILLIS_PER_HOUR)
    % 24);\r\n    }\r\n    get minutes() {\r\n        return TimeSpan.round((this._millis
    / MILLIS_PER_MINUTE) % 60);\r\n    }\r\n    get seconds() {\r\n        return
    TimeSpan.round((this._millis / MILLIS_PER_SECOND) % 60);\r\n    }\r\n    get
    milliseconds() {\r\n        return TimeSpan.round(this._millis % 1000);\r\n   
    }\r\n    get totalDays() {\r\n        return this._millis / MILLIS_PER_DAY;\r\n   
    }\r\n    get totalHours() {\r\n        return this._millis / MILLIS_PER_HOUR;\r\n   
    }\r\n    get totalMinutes() {\r\n        return this._millis / MILLIS_PER_MINUTE;\r\n   
    }\r\n    get totalSeconds() {\r\n        return this._millis / MILLIS_PER_SECOND;\r\n   
    }\r\n    get totalMilliseconds() {\r\n        return this._millis;\r\n    }\r\n   
    add(ts) {\r\n        const result = this._millis + ts.totalMilliseconds;\r\n       
    return new TimeSpan(result);\r\n    }\r\n    subtract(ts) {\r\n        const
    result = this._millis - ts.totalMilliseconds;\r\n        return new TimeSpan(result);\r\n   
    }\r\n}\r\nexports.TimeSpan = TimeSpan;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGltZVNwYW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJUaW1lU3Bhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQztBQUMvQixNQUFNLGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxDQUFHLGFBQWE7QUFDakUsTUFBTSxlQUFlLEdBQUcsaUJBQWlCLEdBQUcsRUFBRSxDQUFDLENBQUssYUFBYTtBQUNqRSxNQUFNLGNBQWMsR0FBRyxlQUFlLEdBQUcsRUFBRSxDQUFDLENBQVEsYUFBYTtBQUVqRSxNQUFhLFFBQVE7SUFtR2pCLFlBQVksTUFBYztRQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUMxQixDQUFDO0lBbEdPLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBYSxFQUFFLEtBQWE7UUFDaEQsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN6QztRQUVELE1BQU0sR0FBRyxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDMUIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7WUFDbEcscURBQXFEO1lBQ3JELE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUN0QztRQUVELE9BQU8sSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFD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","assetPath":"Assets/ZepetoScripts/ScreenShotScripts/TimeSpan.ts","manifest":{"properties":[],"name":"TimeSpan","description":"","hasAnimatorMove":false},"isCompiled":true}'
  typescriptHash: be668d4a93ff8741d143142704429e44
  onlyWriteTrigger: 0
